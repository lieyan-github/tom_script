; ==========================================================
; ----------------------------------------------------------
; 正则表达式类
;
; 作者: 烈焰
;
; 2016年03月03日 13:53:51
; ----------------------------------------------------------
; ==========================================================

; ----------------------------------------------------------
; 执行正则表达式分析()
; ----------------------------------------------------------
执行正则表达式分析(_text)
{
    if(_text=="")
    {
        show_msg("没有要分析的字符串`n" . Sys.now(), "正则表达式分析")
        return
    }
    _returnRegExStr:= 正则表达式分析(_text)
    Clipboarder.push(_returnRegExStr)
    show_msg(_returnRegExStr . "`n*正则表达式已存入剪贴板数组*`n" . Sys.now())
    ;--- end
}

; ----------------------------------------------------------
; 正则表达式分析(_待分析的字符串)
; 返回分析生成的正则表达式字符串
; ----------------------------------------------------------
正则表达式分析(_待分析的字符串)
{
    _returnRegExStr:= ""
    ;--- 预先要识别的内容
    _要识别的正则表达式列表:= []
    _日期正则表达式:= "\d{4}[-年\.]\d{1,2}[-月\.]\d{1,2}日?"
    ;--- 按空格进行分割字段组
    分割字段组 := StrSplit(_待分析的字符串, " ")
    ;--- 对结果进行测试观察
    _有效分割字段_计数器:= 0
    _处理日志:= []
    ; ----------------------------------------------------------
    ;--- 对分割字段组进行分析
    Loop % 分割字段组.MaxIndex()
    {
        分割字段:= 分割字段组[A_Index]
        ;--- 分析当前的分割字段
        if(trim(分割字段)=="")              ;如果当前分割字段部分为空格一类的
            分割字段组[A_Index]:= "\s*?"
        else                                ;非空格处理
        {
            ;--- 为测试观察做记录对比
            _有效分割字段_计数器++
            arrayAppend(_处理日志, "$" . _有效分割字段_计数器 . "=" . 分割字段)
            ;--- 把当前分割字段, 转化成正则表达式
            if(RegExMatch(分割字段, _日期正则表达式)>0)
                分割字段组[A_Index]:= RegExReplace(分割字段, ".*?" . _日期正则表达式 . ".*", "(.*?" . _日期正则表达式 . ".*?)")
            else if(A_Index == 分割字段组.MaxIndex())
                分割字段组[A_Index]:= "(.*)"
            else
                分割字段组[A_Index]:= "(.*?)"
        }
        ;--- 拼接完整的正则表达式
        if(A_Index==1)
            _returnRegExStr .= 分割字段组[A_Index]
        else
            _returnRegExStr .= "\s" . 分割字段组[A_Index]
    }
    _returnRegExStr := "[分割字段测试]`n" . arrayToStr(_处理日志) . "`n" . _returnRegExStr
    return _returnRegExStr
}

; 正则表达式 模板库
; 获取正则表达式方法: 正则表达式.模板("日期")
class 正则表达式{
    ; public
    模板库 := {}
    ;public
    init模板库(){
        this.模板库["日期"] := "(\d{2,4})[-年\./](\d{1,2})[-月\./](\d{1,2})日?"
    }

    ; public static
    模板(_key){
        正则obj := new 正则表达式()
        正则obj.init模板库()
        Return 正则obj.模板库[_key]
    }
}



